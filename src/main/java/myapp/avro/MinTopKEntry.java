/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package myapp.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class MinTopKEntry extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1688514750498191424L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MinTopKEntry\",\"namespace\":\"myapp.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"score\",\"type\":\"double\"},{\"name\":\"startingWindow\",\"type\":\"long\"},{\"name\":\"endingWindow\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MinTopKEntry> ENCODER =
      new BinaryMessageEncoder<MinTopKEntry>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MinTopKEntry> DECODER =
      new BinaryMessageDecoder<MinTopKEntry>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<MinTopKEntry> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<MinTopKEntry> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<MinTopKEntry> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MinTopKEntry>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this MinTopKEntry to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a MinTopKEntry from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a MinTopKEntry instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static MinTopKEntry fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long id;
  @Deprecated public double score;
  @Deprecated public long startingWindow;
  @Deprecated public long endingWindow;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MinTopKEntry() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param score The new value for score
   * @param startingWindow The new value for startingWindow
   * @param endingWindow The new value for endingWindow
   */
  public MinTopKEntry(java.lang.Long id, java.lang.Double score, java.lang.Long startingWindow, java.lang.Long endingWindow) {
    this.id = id;
    this.score = score;
    this.startingWindow = startingWindow;
    this.endingWindow = endingWindow;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return score;
    case 2: return startingWindow;
    case 3: return endingWindow;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: score = (java.lang.Double)value$; break;
    case 2: startingWindow = (java.lang.Long)value$; break;
    case 3: endingWindow = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'score' field.
   * @return The value of the 'score' field.
   */
  public double getScore() {
    return score;
  }


  /**
   * Sets the value of the 'score' field.
   * @param value the value to set.
   */
  public void setScore(double value) {
    this.score = value;
  }

  /**
   * Gets the value of the 'startingWindow' field.
   * @return The value of the 'startingWindow' field.
   */
  public long getStartingWindow() {
    return startingWindow;
  }


  /**
   * Sets the value of the 'startingWindow' field.
   * @param value the value to set.
   */
  public void setStartingWindow(long value) {
    this.startingWindow = value;
  }

  public void increaseStartingWindow(long value) { this.startingWindow += value;}

  public boolean equals(MinTopKEntry value){
    return
        this.getId() == value.getId() &&
        this.getScore() == value.getScore() &&
        this.getStartingWindow() == value.getStartingWindow() &&
        this.getEndingWindow() == value.getEndingWindow();
  }

  public boolean sameButIncreasedStartingWindow(MinTopKEntry value){
    return this.getId() == value.getId() &&
            this.getScore() == value.getScore() &&
            this.getStartingWindow() == value.getStartingWindow() + 1L &&
            this.getEndingWindow() == value.getEndingWindow();
  }

  /**
   * Gets the value of the 'endingWindow' field.
   * @return The value of the 'endingWindow' field.
   */
  public long getEndingWindow() {
    return endingWindow;
  }


  /**
   * Sets the value of the 'endingWindow' field.
   * @param value the value to set.
   */
  public void setEndingWindow(long value) {
    this.endingWindow = value;
  }

  /**
   * Creates a new MinTopKEntry RecordBuilder.
   * @return A new MinTopKEntry RecordBuilder
   */
  public static myapp.avro.MinTopKEntry.Builder newBuilder() {
    return new myapp.avro.MinTopKEntry.Builder();
  }

  /**
   * Creates a new MinTopKEntry RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MinTopKEntry RecordBuilder
   */
  public static myapp.avro.MinTopKEntry.Builder newBuilder(myapp.avro.MinTopKEntry.Builder other) {
    if (other == null) {
      return new myapp.avro.MinTopKEntry.Builder();
    } else {
      return new myapp.avro.MinTopKEntry.Builder(other);
    }
  }

  /**
   * Creates a new MinTopKEntry RecordBuilder by copying an existing MinTopKEntry instance.
   * @param other The existing instance to copy.
   * @return A new MinTopKEntry RecordBuilder
   */
  public static myapp.avro.MinTopKEntry.Builder newBuilder(myapp.avro.MinTopKEntry other) {
    if (other == null) {
      return new myapp.avro.MinTopKEntry.Builder();
    } else {
      return new myapp.avro.MinTopKEntry.Builder(other);
    }
  }

  /**
   * RecordBuilder for MinTopKEntry instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MinTopKEntry>
    implements org.apache.avro.data.RecordBuilder<MinTopKEntry> {

    private long id;
    private double score;
    private long startingWindow;
    private long endingWindow;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(myapp.avro.MinTopKEntry.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.score)) {
        this.score = data().deepCopy(fields()[1].schema(), other.score);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.startingWindow)) {
        this.startingWindow = data().deepCopy(fields()[2].schema(), other.startingWindow);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.endingWindow)) {
        this.endingWindow = data().deepCopy(fields()[3].schema(), other.endingWindow);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing MinTopKEntry instance
     * @param other The existing instance to copy.
     */
    private Builder(myapp.avro.MinTopKEntry other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.score)) {
        this.score = data().deepCopy(fields()[1].schema(), other.score);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.startingWindow)) {
        this.startingWindow = data().deepCopy(fields()[2].schema(), other.startingWindow);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.endingWindow)) {
        this.endingWindow = data().deepCopy(fields()[3].schema(), other.endingWindow);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public myapp.avro.MinTopKEntry.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public myapp.avro.MinTopKEntry.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'score' field.
      * @return The value.
      */
    public double getScore() {
      return score;
    }


    /**
      * Sets the value of the 'score' field.
      * @param value The value of 'score'.
      * @return This builder.
      */
    public myapp.avro.MinTopKEntry.Builder setScore(double value) {
      validate(fields()[1], value);
      this.score = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'score' field has been set.
      * @return True if the 'score' field has been set, false otherwise.
      */
    public boolean hasScore() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'score' field.
      * @return This builder.
      */
    public myapp.avro.MinTopKEntry.Builder clearScore() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'startingWindow' field.
      * @return The value.
      */
    public long getStartingWindow() {
      return startingWindow;
    }


    /**
      * Sets the value of the 'startingWindow' field.
      * @param value The value of 'startingWindow'.
      * @return This builder.
      */
    public myapp.avro.MinTopKEntry.Builder setStartingWindow(long value) {
      validate(fields()[2], value);
      this.startingWindow = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'startingWindow' field has been set.
      * @return True if the 'startingWindow' field has been set, false otherwise.
      */
    public boolean hasStartingWindow() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'startingWindow' field.
      * @return This builder.
      */
    public myapp.avro.MinTopKEntry.Builder clearStartingWindow() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'endingWindow' field.
      * @return The value.
      */
    public long getEndingWindow() {
      return endingWindow;
    }


    /**
      * Sets the value of the 'endingWindow' field.
      * @param value The value of 'endingWindow'.
      * @return This builder.
      */
    public myapp.avro.MinTopKEntry.Builder setEndingWindow(long value) {
      validate(fields()[3], value);
      this.endingWindow = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'endingWindow' field has been set.
      * @return True if the 'endingWindow' field has been set, false otherwise.
      */
    public boolean hasEndingWindow() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'endingWindow' field.
      * @return This builder.
      */
    public myapp.avro.MinTopKEntry.Builder clearEndingWindow() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MinTopKEntry build() {
      try {
        MinTopKEntry record = new MinTopKEntry();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.score = fieldSetFlags()[1] ? this.score : (java.lang.Double) defaultValue(fields()[1]);
        record.startingWindow = fieldSetFlags()[2] ? this.startingWindow : (java.lang.Long) defaultValue(fields()[2]);
        record.endingWindow = fieldSetFlags()[3] ? this.endingWindow : (java.lang.Long) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MinTopKEntry>
    WRITER$ = (org.apache.avro.io.DatumWriter<MinTopKEntry>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MinTopKEntry>
    READER$ = (org.apache.avro.io.DatumReader<MinTopKEntry>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeDouble(this.score);

    out.writeLong(this.startingWindow);

    out.writeLong(this.endingWindow);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.score = in.readDouble();

      this.startingWindow = in.readLong();

      this.endingWindow = in.readLong();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.score = in.readDouble();
          break;

        case 2:
          this.startingWindow = in.readLong();
          break;

        case 3:
          this.endingWindow = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}











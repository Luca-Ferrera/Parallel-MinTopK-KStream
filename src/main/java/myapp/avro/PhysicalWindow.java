/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package myapp.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PhysicalWindow extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7677828498656605728L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PhysicalWindow\",\"namespace\":\"myapp.avro\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"size\",\"type\":\"int\"},{\"name\":\"hoppingSize\",\"type\":\"int\"},{\"name\":\"actualRecords\",\"type\":\"int\"},{\"name\":\"topKCounter\",\"type\":\"int\"},{\"name\":\"lowerBoundPointer\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"MinTopKEntry\",\"fields\":[{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"score\",\"type\":\"double\"},{\"name\":\"startingWindow\",\"type\":\"long\"},{\"name\":\"endingWindow\",\"type\":\"long\"},{\"name\":\"rating\",\"type\":\"double\"}]}]},{\"name\":\"minRating\",\"type\":[\"null\",\"double\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PhysicalWindow> ENCODER =
      new BinaryMessageEncoder<PhysicalWindow>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PhysicalWindow> DECODER =
      new BinaryMessageDecoder<PhysicalWindow>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PhysicalWindow> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PhysicalWindow> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PhysicalWindow> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PhysicalWindow>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PhysicalWindow to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PhysicalWindow from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PhysicalWindow instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PhysicalWindow fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long id;
  @Deprecated public int size;
  @Deprecated public int hoppingSize;
  @Deprecated public int actualRecords;
  @Deprecated public int topKCounter;
  @Deprecated public myapp.avro.MinTopKEntry lowerBoundPointer;
  @Deprecated public java.lang.Double minRating;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PhysicalWindow() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param size The new value for size
   * @param hoppingSize The new value for hoppingSize
   * @param actualRecords The new value for actualRecords
   * @param topKCounter The new value for topKCounter
   * @param lowerBoundPointer The new value for lowerBoundPointer
   * @param minRating The new value for minScore
   *    */

  public PhysicalWindow(java.lang.Long id, java.lang.Integer size, java.lang.Integer hoppingSize, java.lang.Integer actualRecords, java.lang.Integer topKCounter, myapp.avro.MinTopKEntry lowerBoundPointer, java.lang.Double minRating) {
   this.id = id;
   this.size = size;
   this.hoppingSize = hoppingSize;
   this.actualRecords = actualRecords;
   this.topKCounter = topKCounter;
   this.lowerBoundPointer = lowerBoundPointer;
   this.minRating = minRating;
   }


  /**
   *    * All-args minus minScore constructor.
   *    * @param id The new value for id
   *    * @param size The new value for size
   *    * @param hoppingSize The new value for hoppingSize
   *    * @param actualRecords The new value for actualRecords
   *    * @param topKCounter The new value for topKCounter
   *    * @param lowerBoundPointer The new value for lowerBoundPointerminRating The new value for minRating
   */
  public PhysicalWindow(java.lang.Long id, java.lang.Integer size, java.lang.Integer hoppingSize, java.lang.Integer actualRecords, java.lang.Integer topKCounter, myapp.avro.MinTopKEntry lowerBoundPointer) {
    this.id = id;
    this.size = size;
    this.hoppingSize = hoppingSize;
    this.actualRecords = actualRecords;
    this.topKCounter = topKCounter;
    this.lowerBoundPointer = lowerBoundPointer;
    this.minRating = null;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return size;
    case 2: return hoppingSize;
    case 3: return actualRecords;
    case 4: return topKCounter;
    case 5: return lowerBoundPointer;
    case 6: return minRating;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: size = (java.lang.Integer)value$; break;
    case 2: hoppingSize = (java.lang.Integer)value$; break;
    case 3: actualRecords = (java.lang.Integer)value$; break;
    case 4: topKCounter = (java.lang.Integer)value$; break;
    case 5: lowerBoundPointer = (myapp.avro.MinTopKEntry)value$; break;
    case 6: minRating = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'size' field.
   * @return The value of the 'size' field.
   */
  public int getSize() {
    return size;
  }


  /**
   * Sets the value of the 'size' field.
   * @param value the value to set.
   */
  public void setSize(int value) {
    this.size = value;
  }

  /**
   * Gets the value of the 'hoppingSize' field.
   * @return The value of the 'hoppingSize' field.
   */
  public int getHoppingSize() {
    return hoppingSize;
  }


  /**
   * Sets the value of the 'hoppingSize' field.
   * @param value the value to set.
   */
  public void setHoppingSize(int value) {
    this.hoppingSize = value;
  }

  /**
   * Gets the value of the 'actualRecords' field.
   * @return The value of the 'actualRecords' field.
   */
  public int getActualRecords() {
    return actualRecords;
  }


  /**
   * Sets the value of the 'actualRecords' field.
   * @param value the value to set.
   */
  public void setActualRecords(int value) {
    this.actualRecords = value;
  }

  public void increaseActualRecords(int value){this.actualRecords += value;}

  /**
   * Gets the value of the 'topKCounter' field.
   * @return The value of the 'topKCounter' field.
   */
  public int getTopKCounter() {
    return topKCounter;
  }

  public void increaseTopKCounter(int value){this.topKCounter += value;}

  /**
   * Sets the value of the 'topKCounter' field.
   * @param value the value to set.
   */
  public void setTopKCounter(int value) {
    this.topKCounter = value;
  }

  /**
   * Gets the value of the 'lowerBoundPointer' field.
   * @return The value of the 'lowerBoundPointer' field.
   */
  public myapp.avro.MinTopKEntry getLowerBoundPointer() {
    return lowerBoundPointer;
  }


  /**
   * Sets the value of the 'lowerBoundPointer' field.
   * @param value the value to set.
   */
  public void setLowerBoundPointer(myapp.avro.MinTopKEntry value) {
    this.lowerBoundPointer = value;
  }

  /**
   * Gets the value of the 'minRating' field.
   * @return The value of the 'minRating' field.
   */
  public java.lang.Double getMinRating() {
    return minRating;
  }


  /**
   * Sets the value of the 'minRating' field.
   * @param value the value to set.
   */
  public void setMinRating(java.lang.Double value) {
    this.minRating = value;
  }

  /**
   * Creates a new PhysicalWindow RecordBuilder.
   * @return A new PhysicalWindow RecordBuilder
   */
  public static myapp.avro.PhysicalWindow.Builder newBuilder() {
    return new myapp.avro.PhysicalWindow.Builder();
  }

  /**
   * Creates a new PhysicalWindow RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PhysicalWindow RecordBuilder
   */
  public static myapp.avro.PhysicalWindow.Builder newBuilder(myapp.avro.PhysicalWindow.Builder other) {
    if (other == null) {
      return new myapp.avro.PhysicalWindow.Builder();
    } else {
      return new myapp.avro.PhysicalWindow.Builder(other);
    }
  }

  /**
   * Creates a new PhysicalWindow RecordBuilder by copying an existing PhysicalWindow instance.
   * @param other The existing instance to copy.
   * @return A new PhysicalWindow RecordBuilder
   */
  public static myapp.avro.PhysicalWindow.Builder newBuilder(myapp.avro.PhysicalWindow other) {
    if (other == null) {
      return new myapp.avro.PhysicalWindow.Builder();
    } else {
      return new myapp.avro.PhysicalWindow.Builder(other);
    }
  }

  /**
   * RecordBuilder for PhysicalWindow instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PhysicalWindow>
    implements org.apache.avro.data.RecordBuilder<PhysicalWindow> {

    private long id;
    private int size;
    private int hoppingSize;
    private int actualRecords;
    private int topKCounter;
    private myapp.avro.MinTopKEntry lowerBoundPointer;
    private myapp.avro.MinTopKEntry.Builder lowerBoundPointerBuilder;
    private java.lang.Double minRating;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(myapp.avro.PhysicalWindow.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.size)) {
        this.size = data().deepCopy(fields()[1].schema(), other.size);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.hoppingSize)) {
        this.hoppingSize = data().deepCopy(fields()[2].schema(), other.hoppingSize);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.actualRecords)) {
        this.actualRecords = data().deepCopy(fields()[3].schema(), other.actualRecords);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.topKCounter)) {
        this.topKCounter = data().deepCopy(fields()[4].schema(), other.topKCounter);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.lowerBoundPointer)) {
        this.lowerBoundPointer = data().deepCopy(fields()[5].schema(), other.lowerBoundPointer);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (other.hasLowerBoundPointerBuilder()) {
        this.lowerBoundPointerBuilder = myapp.avro.MinTopKEntry.newBuilder(other.getLowerBoundPointerBuilder());
      }
      if (isValidValue(fields()[6], other.minRating)) {
        this.minRating = data().deepCopy(fields()[6].schema(), other.minRating);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing PhysicalWindow instance
     * @param other The existing instance to copy.
     */
    private Builder(myapp.avro.PhysicalWindow other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.size)) {
        this.size = data().deepCopy(fields()[1].schema(), other.size);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.hoppingSize)) {
        this.hoppingSize = data().deepCopy(fields()[2].schema(), other.hoppingSize);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.actualRecords)) {
        this.actualRecords = data().deepCopy(fields()[3].schema(), other.actualRecords);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.topKCounter)) {
        this.topKCounter = data().deepCopy(fields()[4].schema(), other.topKCounter);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lowerBoundPointer)) {
        this.lowerBoundPointer = data().deepCopy(fields()[5].schema(), other.lowerBoundPointer);
        fieldSetFlags()[5] = true;
      }
      this.lowerBoundPointerBuilder = null;
      if (isValidValue(fields()[6], other.minRating)) {
        this.minRating = data().deepCopy(fields()[6].schema(), other.minRating);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder setId(long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder clearId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'size' field.
      * @return The value.
      */
    public int getSize() {
      return size;
    }


    /**
      * Sets the value of the 'size' field.
      * @param value The value of 'size'.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder setSize(int value) {
      validate(fields()[1], value);
      this.size = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'size' field has been set.
      * @return True if the 'size' field has been set, false otherwise.
      */
    public boolean hasSize() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'size' field.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder clearSize() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'hoppingSize' field.
      * @return The value.
      */
    public int getHoppingSize() {
      return hoppingSize;
    }


    /**
      * Sets the value of the 'hoppingSize' field.
      * @param value The value of 'hoppingSize'.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder setHoppingSize(int value) {
      validate(fields()[2], value);
      this.hoppingSize = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'hoppingSize' field has been set.
      * @return True if the 'hoppingSize' field has been set, false otherwise.
      */
    public boolean hasHoppingSize() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'hoppingSize' field.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder clearHoppingSize() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'actualRecords' field.
      * @return The value.
      */
    public int getActualRecords() {
      return actualRecords;
    }


    /**
      * Sets the value of the 'actualRecords' field.
      * @param value The value of 'actualRecords'.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder setActualRecords(int value) {
      validate(fields()[3], value);
      this.actualRecords = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'actualRecords' field has been set.
      * @return True if the 'actualRecords' field has been set, false otherwise.
      */
    public boolean hasActualRecords() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'actualRecords' field.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder clearActualRecords() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'topKCounter' field.
      * @return The value.
      */
    public int getTopKCounter() {
      return topKCounter;
    }


    /**
      * Sets the value of the 'topKCounter' field.
      * @param value The value of 'topKCounter'.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder setTopKCounter(int value) {
      validate(fields()[4], value);
      this.topKCounter = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'topKCounter' field has been set.
      * @return True if the 'topKCounter' field has been set, false otherwise.
      */
    public boolean hasTopKCounter() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'topKCounter' field.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder clearTopKCounter() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lowerBoundPointer' field.
      * @return The value.
      */
    public myapp.avro.MinTopKEntry getLowerBoundPointer() {
      return lowerBoundPointer;
    }


    /**
      * Sets the value of the 'lowerBoundPointer' field.
      * @param value The value of 'lowerBoundPointer'.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder setLowerBoundPointer(myapp.avro.MinTopKEntry value) {
      validate(fields()[5], value);
      this.lowerBoundPointerBuilder = null;
      this.lowerBoundPointer = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lowerBoundPointer' field has been set.
      * @return True if the 'lowerBoundPointer' field has been set, false otherwise.
      */
    public boolean hasLowerBoundPointer() {
      return fieldSetFlags()[5];
    }

    /**
     * Gets the Builder instance for the 'lowerBoundPointer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public myapp.avro.MinTopKEntry.Builder getLowerBoundPointerBuilder() {
      if (lowerBoundPointerBuilder == null) {
        if (hasLowerBoundPointer()) {
          setLowerBoundPointerBuilder(myapp.avro.MinTopKEntry.newBuilder(lowerBoundPointer));
        } else {
          setLowerBoundPointerBuilder(myapp.avro.MinTopKEntry.newBuilder());
        }
      }
      return lowerBoundPointerBuilder;
    }

    /**
     * Sets the Builder instance for the 'lowerBoundPointer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public myapp.avro.PhysicalWindow.Builder setLowerBoundPointerBuilder(myapp.avro.MinTopKEntry.Builder value) {
      clearLowerBoundPointer();
      lowerBoundPointerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'lowerBoundPointer' field has an active Builder instance
     * @return True if the 'lowerBoundPointer' field has an active Builder instance
     */
    public boolean hasLowerBoundPointerBuilder() {
      return lowerBoundPointerBuilder != null;
    }

    /**
      * Clears the value of the 'lowerBoundPointer' field.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder clearLowerBoundPointer() {
      lowerBoundPointer = null;
      lowerBoundPointerBuilder = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'minRating' field.
      * @return The value.
      */
    public java.lang.Double getMinRating() {
      return minRating;
    }


    /**
      * Sets the value of the 'minRating' field.
      * @param value The value of 'minRating'.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder setMinRating(java.lang.Double value) {
      validate(fields()[6], value);
      this.minRating = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'minRating' field has been set.
      * @return True if the 'minRating' field has been set, false otherwise.
      */
    public boolean hasMinRating() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'minRating' field.
      * @return This builder.
      */
    public myapp.avro.PhysicalWindow.Builder clearMinRating() {
      minRating = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PhysicalWindow build() {
      try {
        PhysicalWindow record = new PhysicalWindow();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.size = fieldSetFlags()[1] ? this.size : (java.lang.Integer) defaultValue(fields()[1]);
        record.hoppingSize = fieldSetFlags()[2] ? this.hoppingSize : (java.lang.Integer) defaultValue(fields()[2]);
        record.actualRecords = fieldSetFlags()[3] ? this.actualRecords : (java.lang.Integer) defaultValue(fields()[3]);
        record.topKCounter = fieldSetFlags()[4] ? this.topKCounter : (java.lang.Integer) defaultValue(fields()[4]);
        if (lowerBoundPointerBuilder != null) {
          try {
            record.lowerBoundPointer = this.lowerBoundPointerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("lowerBoundPointer"));
            throw e;
          }
        } else {
          record.lowerBoundPointer = fieldSetFlags()[5] ? this.lowerBoundPointer : (myapp.avro.MinTopKEntry) defaultValue(fields()[5]);
        }
        record.minRating = fieldSetFlags()[6] ? this.minRating : (java.lang.Double) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PhysicalWindow>
    WRITER$ = (org.apache.avro.io.DatumWriter<PhysicalWindow>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PhysicalWindow>
    READER$ = (org.apache.avro.io.DatumReader<PhysicalWindow>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.id);

    out.writeInt(this.size);

    out.writeInt(this.hoppingSize);

    out.writeInt(this.actualRecords);

    out.writeInt(this.topKCounter);

    if (this.lowerBoundPointer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      this.lowerBoundPointer.customEncode(out);
    }

    if (this.minRating == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.minRating);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readLong();

      this.size = in.readInt();

      this.hoppingSize = in.readInt();

      this.actualRecords = in.readInt();

      this.topKCounter = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.lowerBoundPointer = null;
      } else {
        if (this.lowerBoundPointer == null) {
          this.lowerBoundPointer = new myapp.avro.MinTopKEntry();
        }
        this.lowerBoundPointer.customDecode(in);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.minRating = null;
      } else {
        this.minRating = in.readDouble();
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readLong();
          break;

        case 1:
          this.size = in.readInt();
          break;

        case 2:
          this.hoppingSize = in.readInt();
          break;

        case 3:
          this.actualRecords = in.readInt();
          break;

        case 4:
          this.topKCounter = in.readInt();
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.lowerBoundPointer = null;
          } else {
            if (this.lowerBoundPointer == null) {
              this.lowerBoundPointer = new myapp.avro.MinTopKEntry();
            }
            this.lowerBoundPointer.customDecode(in);
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.minRating = null;
          } else {
            this.minRating = in.readDouble();
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}











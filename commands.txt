// avro consumer
docker exec -it schema-registry /usr/bin/kafka-avro-console-consumer --topic summed-rated-movies --bootstrap-server broker:9092 --from-beginning

// rating producer
docker exec -i schema-registry /usr/bin/kafka-avro-console-producer --topic ratings --broker-list broker:9092 --property value.schema="$(< src/main/avro/rating.avsc)"
// ratings
{"id": 294, "rating": 8.2}
{"id": 294, "rating": 8.5}
{"id": 354, "rating": 9.9}
{"id": 354, "rating": 9.7}
{"id": 782, "rating": 7.8}
{"id": 782, "rating": 7.7}
{"id": 128, "rating": 8.7}
{"id": 128, "rating": 8.4}
{"id": 780, "rating": 2.1}
{"id": 100, "rating": 6.3}
{"id": 120, "rating": 7.2}
{"id": 140, "rating": 4.5}
{"id": 120, "rating": 8.9}

// movie producer
docker exec -i schema-registry /usr/bin/kafka-avro-console-producer --topic movies --broker-list broker:9092 --property value.schema="$(< src/main/avro/movie.avsc)"
// movies
{"id": 294, "title": "Die Hard", "release_year": 1988}
{"id": 354, "title": "Tree of Life", "release_year": 2011}
{"id": 782, "title": "A Walk in the Clouds", "release_year": 1995}
{"id": 128, "title": "The Big Lebowski", "release_year": 1998}
{"id": 100, "title": "Spiderman", "release_year": 2002}
{"id": 120, "title": "Pirates of The Caribbean", "release_year": 2003}
{"id": 140, "title": "La Grande Bellezza", "release_year": 2013}

1)  implementare un semplice topK in locale

2)  calcolare i topk sulle singole partizioni
    unire i risultati in un topic senza partizione

3)  usare uno stato distribuito per estrapolare i topK

4)  implementare algoritmo: vedi se già c'è
    prima centralizzato senza partizioni
    poi con partizioni

score = rating/10 * 0.8 + release_year/2020 * 0.2

loggare tempi di esecuzione su ogni kstream

TASKS:
[x] implementazione centralizzata di materialize score & sort
[x] implementazione distribuita di materialize score & sort
    - [ ] Ogni processo ordina e scrive su un topic i topK locali -> vado a prendere i valori da quel topic
    - [ ] Special topic con key la posizione nella classica, inviare al topic solo i valori che cambiano posizione in classifica
[ ] implementazione centralizzata di [1] non gestisce gli aggiornamenti (non arrivano 2 record uguali) assunzione che ogni record è diverso dall'altro
[ ] progettazione di implementazione distribuita di [1]

[1] D. Yang, A. Shastri, E.A. Rundensteiner and M.O. Ward,
Anoptimal strategy for monitoring top-k queries in streaming windows,
in:Proceedings of the 14th International Conference onExtending Database Technology, ACM, 2011, pp. 57–68.
